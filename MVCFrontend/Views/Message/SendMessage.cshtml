@using MVCFrontend.Helpers
@using System.Security.Claims;
@model MVCFrontend.Models.MessageViewModel
@{
    ViewBag.Title = "About";
    var hasRights = ClaimsPrincipal.Current.HasClaim("role", "SendMessage") || ClaimsPrincipal.Current.isAdmin();
    var url = Appsettings.SocketServerUrl();
}
<h2>@ViewBag.Title.</h2>
<h3>Welcome @Model.UserName! The following roles are assigned to you: @Model.Roles</h3>
@if (hasRights)
{
    <div class="row">
        <div class="col-md-4">
            <p>Please enter a string identifying your message to the remote queue. </p>
            <p>Everything that is not a "[0-9a-zA-Z-_ ]" will be stripped from this input, spaces stay.</p>
            <form id="msgForm" action="" method="post">
                <input type="text" name="message" /> <br />
                <input type="submit" value="Send" /> <span id="apiResult"></span>
            </form>
        </div>
        <div class="col-md-8"><br /><button id="toggleQueue" class="fancyButtons" >Toggle Queue processing mode</button> <span id="toggleResult"></span></div>
     </div>
    <hr />
    <div class="row">
        <div class="col-md-8">Remote socketChat (=socket chat). <a class="fancyButtons" href="#" id="initializeChat" >Re-Initialize</a></div>
        <div class="col-md-4">@Model.UserName's actions of today. <a href="#" id="queryPostbackData" class="fancyButtons">Refresh</a></div>
    </div>
    <div class="row">
        <div id="socketChat" class="col-md-8" style="border: solid 1px #3399CC; padding: 3px;"></div>
        <div id="postbackResult" class="col-md-4" style="border: solid 1px #3399CC; padding: 3px;"></div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="~/Scripts/Custom/secure-utils.js"></script>
    <script>
        $(document).ready(function () {
            $('#msgForm').submit(function (event) {
                event.preventDefault();
                CallFuncWhenAxjaxTokenValid(Submit, '@Model.AjaxBackendToken', "#apiResult", $('input[name=message]').val());
            });
            $('#queryPostbackData').click(function (event) {
                event.preventDefault();
                CallFuncWhenAxjaxTokenValid(QueryPostbackData, '@Model.AjaxBackendToken', "#postbackResult");
            });
            $('#initializeChat').click(function (event) {
                event.preventDefault();
                InitializeChat()
            });
            $('#toggleQueue').click(function (event) {
                event.preventDefault();
                ToggleQueueStatus('@Model.AjaxDirectQueueToken', "#toggleResult");
            });
            //call these on page load
            ToggleQueueStatus('@Model.AjaxDirectQueueToken', "#toggleResult");
            QueryPostbackData('@Model.AjaxBackendToken', '#postbackResult');
            InitializeChat();
        });

        function InitializeChat() {
            $("#socketChat").empty();
            ConnectToSocketServer();
        }
        function ToggleQueueStatus(ajaxAccessToken, resultDivId) {
            var formData = {
                'MessageId': 'not needed',
                'PostBackUrl': "",
                'socketToken': "@Model.SocketToken",
                'doneToken': "not needed",
                'UserName': ''
            };
            $.ajax({
                type: 'POST',
                url: '@Appsettings.EntrypointUrl()' +'api/cmdqueue',
                data: formData,
                dataType: 'text',
                encode: true,
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('Authorization', 'bearer ' + ajaxAccessToken);
                    xhr.setRequestHeader('Access-Control-Allow-Origin', '*');
                },
            })
            .done(function (data) {
                var obj = JSON.parse(data);
                $(resultDivId).text("Queue manager now runs " + obj.message);
            })
            .fail(function (jqXHR, textStatus, errorThrown) {
                $(resultDivId).text("ToggleQueuestatus failed: code=" + jqXHR.status + ", error= " + jqXHR.statusText);
            })
        }
        function Submit(ajaxAccessToken, resultDivId, data) {
            var formData = {
                'message': data,
                'socketToken': "@Model.SocketToken",
                'doneToken': "@Model.DoneToken"
            };

            $.ajax({
                type: 'POST',
                url: '/Message/ToRemoteQueue',
                data: formData,
                dataType: 'text',
                encode: true,
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('Authorization', 'bearer ' + ajaxAccessToken);
                },
            })
            .done(function (data) {
                $(resultDivId).text(data);
            })
            .fail(function (jqXHR, textStatus, errorThrown) {
                $(resultDivId).append("<br/>Call to queue manager failed: error= " + errorThrown);
            })
        }
    </script>
    //postback data view stuff in this script
    <script>
        function QueryPostbackData(ajaxAccessToken, resultDivId) {
            $(resultDivId).html("<h3>Loading messages... </h3>");
            $.ajax({
                type: 'Get',
                dataType: 'html',
                url: '/Postbackdatas/',
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('Authorization', 'bearer ' + ajaxAccessToken);
                },
            })
            .done(function (data) {
                var scriptArg = "<script>var g_AjaxAccessToken4Details = '@(Model.AjaxBackendToken)'; <" + "/script>";
                $(resultDivId).html(data + scriptArg);
            })
            .fail(function (jqXHR, textStatus, errorThrown) {
                $(resultDivId).append("<br/>Querying postback data failed: error= " + errorThrown);
            })
        }
    </script>
    //Socket stuff in this script
    <script>
        // Create SocketIO instance, connect
        var _gSocket = null;
        var serverUrl = '@Appsettings.SocketServerUrl()';

        function ConnectToSocketServer() {
            if ("WebSocket" in window) {
                var socketToken = '@Model.SocketToken';
                var doneToken = '@Model.DoneToken';
                if (socketToken.length > 0) {
                    try {
                        if (_gSocket != null) {
                            //alert('closing existing socket..');
                            _gSocket.close();
                        }
                        _gSocket = new WebSocket(serverUrl);
                        // Add a message listener
                        _gSocket.onmessage = function (msg) {
                            if (msg.data.toString().indexOf(socketToken.toString()) == 0) {
                                var msgWithoutToken = msg.data.toString().substring(socketToken.toString().length + 6, msg.data.toString().length);
                                if (msgWithoutToken.indexOf(doneToken.toString()) >= 0) {
                                    LogMessage("Done token received, auto-refreshing postbacks...");
                                    CallFuncWhenAxjaxTokenValid(QueryPostbackData, '@Model.AjaxBackendToken', "#postbackResult");
                                }
                                else {
                                    LogMessage(msgWithoutToken);
                                }
                            }
                            else {
                                LogMessage("This message seems from another session. - " + msg.data);
                            }

                        };
                        _gSocket.onerror = function (msg) {
                            LogMessage("_gSocket.onerror is triggered: " + msg.data);
                        };

                        LogMessage("..chat log initialized.\n");
                    }
                    catch (ex) {
                        LogMessage("Exception connecting to socket server: " + serverUrl);
                        LogMessage(ex.message);
                    }
                }
                else {
                    LogMessage("Socket Token not set, the chat will not work, refresh the page.");
                }
            }
            else {
                LogMessage("webSockets are not supported on this browser, the chat log will not work.");
            }
        }

        function socketDisconnected(socketArg) {
            return socketArg.ready == 0;
        }

        function LogMessage(msg) {
            $("#socketChat").prepend("<p>" + msg + "</p>");
        }
    </script>
    }
    else
    {
    <p>Your assigned roles do not allow for sending messages.</p>
    }
