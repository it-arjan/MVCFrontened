@using MVCFrontend.Helpers
@using MVCFrontend.Extentions
@using MVCFrontend.Helpers
@using System.Security.Claims
@model MVCFrontend.Models.AboutModel
@{
    ViewBag.Title = "About";
    // Find difference between Date.Now and Date.UtcNow
    var localNow = DateTime.Now;
    var utcNow = DateTime.UtcNow;
    var difference = localNow - utcNow;

    DateTime UnoxStartDateCET = new DateTime(1970, 1, 1).AddHours(difference.TotalHours);
    string claimValue = string.Empty;
    string claimDate = string.Empty;
    string claimDateUtils = string.Empty;
    var expHit = false;
}
<h2>@ViewBag.Title.</h2>
<h3></h3>

<div>
    @ViewBag.Message, @Html.ActionLink("Send a message to a remote Message Queue", "Index", "Message")
</div>

<div>
    <p>
        <h3>All Session variables</h3>
        @if (Session.Count == 0)
        {
            <span>-none-</span>
        }
        @foreach (string key in Session.Keys)
        {
            <span><b>@key :</b></span><span>@Session[key].ToString()</span><br />
        }
    </p>
    <h3>Token & cookie values</h3>
    <p>
        <span>Token Session Start</span><span>@Model.TokenSessionStart</span>
    </p>
    <p>
        <span>Token Session end</span><span>@Model.TokenSessionEnd</span>
    </p>
    <p>
        <span>Human Token Expire (server time) </span><span>@Utils.GetTimeClaimFromToken(DateTime.Now - DateTime.UtcNow, ClaimsPrincipal.Current.GetClaim("access_token"), "exp");</span>
    </p>
    <p>
        <span>AjaxQueueToken Expire (server time) </span><span>@Utils.GetTimeClaimFromToken(DateTime.Now - DateTime.UtcNow, ClaimsPrincipal.Current.GetClaim("ajax_cors_token"), "exp");</span>
    </p>
    <p>
        <span>Auth Cookie timeout </span><span>@ClaimsPrincipal.Current.GetClaim("auth_cookie_exp")</span>
    </p>
    
    <h3>All claims</h3>
    @foreach (var claim in Model.Claims)
    {
        claimDateUtils = string.Empty;
        claimValue = claim.Value;
        <p>
            <div><strong> @claim.Type</strong><span>,  </span>@claimValue </div>

            @if (claim.Type == "exp" || claim.Type == "auth_time")
            {
                claimDate = UnoxStartDateCET.AddSeconds(double.Parse(claim.Value)).ToLongTimeString();
                <div> <strong>@claim.Type</strong><span>,  </span>@claimDate</div>
                if (claim.Type == "exp")
                {
                    claimDateUtils = Utils.GetTimeClaimFromToken(DateTime.Now - DateTime.UtcNow, ClaimsPrincipal.Current.GetClaim("access_token"), "exp").ToLongTimeString();
                    <div> <strong>From Token:</strong><span>,  </span>@Utils.GetClaimFromToken(ClaimsPrincipal.Current.GetClaim("access_token"), "exp")<span> , </span> @claimDateUtils</div>
                }
                else if (claim.Type == "auth_time")
                {
                    claimDateUtils = Utils.GetTimeClaimFromToken(DateTime.Now - DateTime.UtcNow, ClaimsPrincipal.Current.GetClaim("access_token"), "exp").ToLongTimeString();
                    <div> <strong>From Token:</strong><span>,  </span>@Utils.GetClaimFromToken(ClaimsPrincipal.Current.GetClaim("access_token"), "auth_time")<span> , </span> @claimDateUtils</div>
                }

            }
            @if (expHit)
            {
                expHit = false;
            }
            </p>
    }
    </div>
