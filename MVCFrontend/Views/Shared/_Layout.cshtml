@using System.Security.Claims
@using MVCFrontend.Helpers
@using MVCFrontend.Extentions
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - My ASP.NET Application</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")
    @*<script src="https://code.jquery.com/jquery-3.2.1.js"
            integrity="sha256-DZAnKJ/6XZ9si04Hgrsxu/8s717jcIzLy3oi35EouyE="
            crossorigin="anonymous"></script>*@
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Application name", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li><a href="@Configsettings.HostUrl()/message">Private Area</a></li>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <li>@Html.ActionLink("View Claims", "About", "Home")</li>
                        <li>@Html.ActionLink("Trigger Errors", "Index", "TriggerError")</li>
                        <li><a href="/logout">Logout</a></li>
                        <li style="color:white;">
                            <span>AspSessionID: @Session.SessionID</span><br />
                            <span>Server time: @DateTime.Now.ToLongTimeString()</span>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
    <div id="message_box1">
        The floating message goes here
    </div>
    <div id="message_box2">
        The floating message goes here
    </div>
    <div id="message_box3">
        The floating message goes here
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p>
        </footer>
    </div>
    <script src="~/Scripts/Custom/NotificationAnimate.js"></script>
    @if (ClaimsPrincipal.Current.Identity.IsAuthenticated)
    {
        //Socket stuff in this script
    <script>
            // Create SocketIO instance, connect
            var _gSocket = null;
            var serverUrl = '@Configsettings.SocketServerUrl()';

            function ConnectToSocketServer() {
                if ("WebSocket" in window) {
                    var qm_log_token = '@ClaimsPrincipal.Current.GetClaimValue(IdSrv3.ClaimQmFeedId)';
                    var doneToken = '@ClaimsPrincipal.Current.GetClaimValue(IdSrv3.ClaimPostbackCompleted)';
                    var notification_token = '@ClaimsPrincipal.Current.GetClaimValue(IdSrv3.ClaimNotificationFeedId)';
                    var api_feed_token = '@ClaimsPrincipal.Current.GetClaimValue(IdSrv3.ClaimApiFeedId)';
                    var socket_server_access_token = '@ClaimsPrincipal.Current.GetClaimValue(IdSrv3.ClaimScoketAccess)';

                    if (qm_log_token.length > 0) {
                        try {
                            if (_gSocket != null) {
                                //alert('closing existing socket..');
                                _gSocket.close();
                            }
                            _gSocket = new WebSocket(serverUrl, socket_server_access_token);
                            // Add a message listener
                            _gSocket.onmessage = function (msg) {
                                if (msg.data.toString().indexOf(qm_log_token.toString()) == 0) {
                                    var msgWithoutToken = msg.data.toString().substring(qm_log_token.toString().length + 6, msg.data.toString().length);
                                    if (msgWithoutToken.indexOf(doneToken.toString()) >= 0) {
                                        toLogManagerChat("Done token received, auto-refreshing postbacks...");
                                        CallFuncWhenCookieStillValid(QueryPostbackData, 'token-not-used', "#postbackResult");
                                    }
                                    else {
                                        toLogManagerChat(msgWithoutToken);
                                    }
                                }
                                else if (msg.data.toString().indexOf(notification_token.toString()) == 0) {
                                    var msgWithoutToken = msg.data.toString().substring(notification_token.toString().length + 6, msg.data.toString().length);
                                    DisplayNotification(msgWithoutToken);
                                }
                                else if (msg.data.toString().indexOf(api_feed_token.toString()) == 0) {
                                    var msgWithoutToken = msg.data.toString().substring(api_feed_token.toString().length + 6, msg.data.toString().length);
                                    DisplayApiFeed(msgWithoutToken);
                                }
                                else {
                                    DisplayNotification("It seems other users are active on the site..");
                                }

                            };
                            _gSocket.onerror = function (msg) {
                                toLogManagerChat("_gSocket.onerror is triggered: " + msg.data);
                            };

                            toLogManagerChat("..socket log initialized. Log messages of remote system will show here..");
                        }
                        catch (ex) {
                            toLogManagerChat("Exception connecting to socket server: " + serverUrl);
                            toLogManagerChat(ex.message);
                        }
                    }
                    else {
                        toLogManagerChat("Socket Token not set, the socket chat will not work, refresh the page.");
                    }
                }
                else {
                    toLogManagerChat("webSockets are not supported on this browser, the socket chat log will not work.");
                }
            }

            function socketDisconnected(socketArg) {
                return socketArg.ready == 0;
            }
            function DisplayApiFeed(msg) {
                if ($("#api-request-feed").text().startsWith("Data Api")){
                    $("#api-request-feed").html("<p>" + msg + "</p>");
                }
                else {
                    $("#api-request-feed").prepend("<p>" + msg + "</p>");
                }

            }

            function toLogManagerChat(msg) {
                $("#socketChat").prepend("<p>" + msg + "</p>");
            }
    </script>
    }
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>
